// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Entry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Entry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Entry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Entry", id.toString(), this);
    }
  }

  static load(id: string): Entry | null {
    return changetype<Entry | null>(store.get("Entry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get truckId(): string {
    let value = this.get("truckId");
    return value!.toString();
  }

  set truckId(value: string) {
    this.set("truckId", Value.fromString(value));
  }

  get timeOut(): BigInt {
    let value = this.get("timeOut");
    return value!.toBigInt();
  }

  set timeOut(value: BigInt) {
    this.set("timeOut", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }
}

export class Vehicle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vehicle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vehicle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vehicle", id.toString(), this);
    }
  }

  static load(id: string): Vehicle | null {
    return changetype<Vehicle | null>(store.get("Vehicle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberOfTrips(): BigInt {
    let value = this.get("numberOfTrips");
    return value!.toBigInt();
  }

  set numberOfTrips(value: BigInt) {
    this.set("numberOfTrips", Value.fromBigInt(value));
  }
}

export class TripData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TripData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TripData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TripData", id.toString(), this);
    }
  }

  static load(id: string): TripData | null {
    return changetype<TripData | null>(store.get("TripData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get numberOfVehicles(): BigInt {
    let value = this.get("numberOfVehicles");
    return value!.toBigInt();
  }

  set numberOfVehicles(value: BigInt) {
    this.set("numberOfVehicles", Value.fromBigInt(value));
  }
}

export class Scam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Scam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Scam must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Scam", id.toString(), this);
    }
  }

  static load(id: string): Scam | null {
    return changetype<Scam | null>(store.get("Scam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get truckId(): string {
    let value = this.get("truckId");
    return value!.toString();
  }

  set truckId(value: string) {
    this.set("truckId", Value.fromString(value));
  }

  get timeOut(): BigInt {
    let value = this.get("timeOut");
    return value!.toBigInt();
  }

  set timeOut(value: BigInt) {
    this.set("timeOut", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }
}
